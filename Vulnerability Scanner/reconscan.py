#!/usr/bin/env python
import subprocess
import multiprocessing
from multiprocessing import Process, Queue
import os
import time
import fileinput
import atexit
import sys
import socket

# Todo:
# Add mysql nmap-script
# Change replace to sed:
# sed 's|literal_pattern|replacement_string|g'

start = time.time()

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'


# Creates a function for multiprocessing. Several things at once.
def multProc(targetin, scanip, port):
    jobs = []
    p = multiprocessing.Process(target=targetin, args=(scanip,port))
    jobs.append(p)
    p.start()
    return

def connect_to_port(ip_address, port, service):

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((ip_address, int(port)))
    banner = s.recv(1024)

    if service == "ftp":
        s.send("USER anonymous\r\n")
        user = s.recv(1024)
        s.send("PASS anonymous\r\n")
        password = s.recv(1024)
        total_communication = banner + "\r\n" + user + "\r\n" + password
        write_to_file(ip_address, "ftp-connect", total_communication)
    elif service == "smtp":
        total_communication = banner + "\r\n"
        write_to_file(ip_address, "smtp-connect", total_communication)
    elif service == "ssh":
        total_communication = banner
        write_to_file(ip_address, "ssh-connect", total_communication)
    elif service == "pop3":
        s.send("USER root\r\n")
        user = s.recv(1024)
        s.send("PASS root\r\n")
        password = s.recv(1024)
        total_communication = banner +  user +  password
        write_to_file(ip_address, "pop3-connect", total_communication)
    s.close()




def write_to_file(ip_address, enum_type, data):

    file_path_linux = os.getcwd() + '/' + ip_address + '/mapping-linux.html'
    file_path_windows = os.getcwd() + '/' + ip_address + '/mapping-windows.html'
    paths = [file_path_linux, file_path_windows]
    print bcolors.OKGREEN + "INFO: Writing " + enum_type + " to template files:\n " + file_path_linux + "   \n" + file_path_windows + bcolors.ENDC
    data = data.replace('\n', '<br>')
    for path in paths:
        newcontents = ""
        if enum_type == "portscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTTCPSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "dirb":
            with open(path) as f:
                newcontents = f.read().replace('INSERTDIRBSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "nikto":
            with open(path) as f:
                newcontents = f.read().replace('INSERTNIKTOSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "ftp-connect":
            with open(path) as f:
                newcontents = f.read().replace('INSERTFTPTEST', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "smtp-connect":
            with open(path) as f:
                newcontents = f.read().replace('INSERTSMTPCONNECT', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "ssh-connect":
            with open(path) as f:
                newcontents = f.read().replace('INSERTSSHCONNECT', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "pop3-connect":
            with open(path) as f:
                newcontents = f.read().replace('INSERTPOP3CONNECT', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "curl":
            with open(path) as f:
                newcontents = f.read().replace('INSERTCURLHEADER', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "httpnmapscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTHTTPSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "httpsnmapscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTHTTPSSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "mssqlenumscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTMSSQLSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "smtpenumscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTSMTPSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "smbnmapscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTSMBSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "ftpenumscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTFTPSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "nmapudpscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTNMAPUDPSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "enum4linux":
            with open(path) as f:
                newcontents = f.read().replace('INSERTENUM4LINUXSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
        if enum_type == "snmpscan":
            with open(path) as f:
                newcontents = f.read().replace('INSERTSNMPSCAN', data)
            with open(path, "w") as f:
                f.write(newcontents)
    return

def dirb(ip_address, port, url_start):
    print bcolors.HEADER + "INFO: Starting dirb scan for " + ip_address + bcolors.ENDC
    DIRBSCAN = "/usr/bin/dirb " + url_start + "://" + ip_address + ":" + str(port) + " -o " + os.getcwd() + "/" + ip_address + "/dirb-" + ip_address + ".txt -r -S"
    print bcolors.HEADER + DIRBSCAN + bcolors.ENDC
    results_dirb = subprocess.check_output(DIRBSCAN, shell=True)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with dirb scan for " + ip_address + bcolors.ENDC
    print results_dirb
    write_to_file(ip_address, "dirb", results_dirb)
    return

def nikto(ip_address, port, url_start):
    print bcolors.HEADER + "INFO: Starting nikto scan for " + ip_address + bcolors.ENDC
    NIKTOSCAN = "/usr/bin/nikto -h " + url_start + "://" + ip_address + " -o " + os.getcwd() + "/" + ip_address + "/nikto-" + url_start + "-" + ip_address + ".txt"
    print bcolors.HEADER + NIKTOSCAN + bcolors.ENDC
    results_nikto = subprocess.check_output(NIKTOSCAN, shell=True)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with NIKTO-scan for " + ip_address + bcolors.ENDC
    print results_nikto
    write_to_file(ip_address, "nikto", results_nikto)
    return


def httpEnum(ip_address, port):
    print bcolors.HEADER + "INFO: Detected http on " + ip_address + ":" + port + bcolors.ENDC
    print bcolors.HEADER + "INFO: Performing nmap web script scan for " + ip_address + ":" + port + bcolors.ENDC

    dirb_process = multiprocessing.Process(target=dirb, args=(ip_address,port,"http"))
    dirb_process.start()
    nikto_process = multiprocessing.Process(target=nikto, args=(ip_address,port,"http"))
    nikto_process.start()
    try:
        CURLSCAN = "/usr/bin/curl -I http://%s --max-time 30" % (ip_address)
        print bcolors.HEADER + CURLSCAN + bcolors.ENDC
        curl_results = subprocess.check_output(CURLSCAN, shell=True)
        write_to_file(ip_address, "curl", curl_results)
    except:
        print "Curl had errors!"
    HTTPSCAN = "/usr/bin/nmap -sV -Pn -vv -p " + str(port) + " --script=http-vhosts,http-userdir-enum,http-apache-negotiation,http-backup-finder,http-config-backup,http-default-accounts,http-methods,http-method-tamper,http-passwd,http-robots.txt,http-devframework,http-enum,http-frontpage-login,http-git,http-iis-webdav-vuln,http-php-version,http-robots.txt,http-shellshock,http-vuln-cve2015-1635 -oN " + os.getcwd() + "/" + ip_address + "/" + ip_address + "_http.nmap " + ip_address
    print bcolors.HEADER + HTTPSCAN + bcolors.ENDC

    http_results = subprocess.check_output(HTTPSCAN, shell=True)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with HTTP-SCAN for " + ip_address + bcolors.ENDC
    print http_results

    write_to_file(ip_address, "httpnmapscan", http_results)
    return

def httpsEnum(ip_address, port):
    print bcolors.HEADER + "INFO: Detected https on " + ip_address + ":" + port + bcolors.ENDC
    print bcolors.HEADER + "INFO: Performing nmap web script scan for " + ip_address + ":" + port + bcolors.ENDC

    dirb_process = multiprocessing.Process(target=dirb, args=(ip_address,port,"https"))
    dirb_process.start()
    nikto_process = multiprocessing.Process(target=nikto, args=(ip_address,port,"https"))
    nikto_process.start()

    SSLSCAN = "/usr/bin/sslscan " + ip_address + ":" + str(port) + " >> " + os.getcwd() + "/" + ip_address + "/ssl_scan_" + ip_address
    print bcolors.HEADER + SSLSCAN + bcolors.ENDC
    ssl_results = subprocess.check_output(SSLSCAN, shell=True)
    print bcolors.OKGREEN + "INFO: CHECK FILE - Finished with SSLSCAN for " + ip_address + bcolors.ENDC

    HTTPSCANS = "/usr/bin/nmap -sV -Pn -vv -p " + str(port) + " --script=http-vhosts,http-userdir-enum,http-apache-negotiation,http-backup-finder,http-config-backup,http-default-accounts,http-methods,http-method-tamper,http-passwd,http-robots.txt,http-devframework,http-enum,http-frontpage-login,http-git,http-iis-webdav-vuln,http-php-version,http-robots.txt,http-shellshock,http-vuln-cve2015-1635 -oN " + os.getcwd() + "/" + ip_address + "/" + ip_address + "_http.nmap " + ip_address
    print bcolors.HEADER + HTTPSCANS + bcolors.ENDC
    https_results = ""
    try:
        https_results = subprocess.check_output(HTTPSCANS, shell=True)
    except Exception as e:
        https_results = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with HTTPS-scan for " + ip_address + bcolors.ENDC
    print https_results
    write_to_file(ip_address, "httpsnmapscan", http_results)
    return

def mssqlEnum(ip_address, port):
    print bcolors.HEADER + "INFO: Detected MS-SQL on " + ip_address + ":" + port + bcolors.ENDC
    print bcolors.HEADER + "INFO: Performing nmap mssql script scan for " + ip_address + ":" + port + bcolors.ENDC
    MSSQLSCAN = "/usr/bin/nmap -sV -Pn -p " + str(port) + " --script=ms-sql-info,ms-sql-config,ms-sql-dump-hashes --script-args=mssql.instance-port=1433,smsql.username-sa,mssql.password-sa -oN " + os.getcwd() + "/" + ip_address + "/mssql_" + ip_address + ".nmap " + ip_address
    print bcolors.HEADER + MSSQLSCAN + bcolors.ENDC
    mssql_results = ""
    try:
        mssql_results = subprocess.check_output(MSSQLSCAN, shell=True)
    except Exception as e:
        mssql_results = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with MSSQL-scan for " + ip_address + bcolors.ENDC
    print mssql_results
    write_to_file(ip_address, "mssqlenumscan", mssql_results)
    return


def smtpEnum(ip_address, port):
    print bcolors.HEADER + "INFO: Detected smtp on " + ip_address + ":" + port  + bcolors.ENDC
    connect_to_port(ip_address, port, "smtp")
    SMTPSCAN = "/usr/bin/nmap -sV -Pn -p " + str(port) + " --script=smtp-commands,smtp-enum-users,smtp-vuln-cve2010-4344,smtp-vuln-cve2011-1720,smtp-vuln-cve2011-1764 " + ip_address + " -oN " + os.getcwd() + "/" + ip_address + "/smtp_" + ip_address + ".nmap"
    print bcolors.HEADER + SMTPSCAN + bcolors.ENDC
    smtp_results = ""
    try:
        smtp_results = subprocess.check_output(SMTPSCAN, shell=True)
    except Exception as e:
        smtp_results = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with SMTP-scan for " + ip_address + bcolors.ENDC
    print smtp_results
    write_to_file(ip_address, "smtpenumscan", smtp_results)
    return

def smbNmap(ip_address, port):
    print "INFO: Detected SMB on " + ip_address + ":" + port
    smbNmap = "/usr/bin/nmap --script=smb-enum-shares.nse,smb-ls.nse,smb-enum-users.nse,smb-mbenum.nse,smb-os-discovery.nse,smb-security-mode.nse,smbv2-enabled.nse,smb-vuln-cve2009-3103.nse,smb-vuln-ms06-025.nse,smb-vuln-ms07-029.nse,smb-vuln-ms08-067.nse,smb-vuln-ms10-054.nse,smb-vuln-ms10-061.nse,smb-vuln-regsvc-dos.nse,smbv2-enabled.nse " + ip_address + " -oN " + os.getcwd() + "/" + ip_address + "/smb_" + ip_address + ".nmap"
    smbNmap_results = ""
    try:
        smbNmap_results = subprocess.check_output(smbNmap, shell=True)
    except Exception as e:
        smbNmap_results = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with SMB-Nmap-scan for " + ip_address + bcolors.ENDC
    print smbNmap_results
    write_to_file(ip_address, "smbnmapscan", smbNmap_results)
    return

def smbEnum(ip_address, port):
    print "INFO: Detected SMB on " + ip_address + ":" + port
    enum4linux = "/usr/bin/enum4linux -a " + ip_address + " > " + os.getcwd() + "/" + ip_address + "/enum4linux_" + ip_address
    enum4linux_results = ""
    try:
        enum4linux_results = subprocess.check_output(enum4linux, shell=True)
    except Exception as e:
        enum4linux_results = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: CHECK FILE - Finished with ENUM4LINUX-Nmap-scan for " + ip_address + bcolors.ENDC
    print enum4linux_results
    write_to_file(ip_address, "enum4linux", enum4linux_results)
    return

def ftpEnum(ip_address, port):
    print bcolors.HEADER + "INFO: Detected ftp on " + ip_address + ":" + port  + bcolors.ENDC
    connect_to_port(ip_address, port, "ftp")
    FTPSCAN = "/usr/bin/nmap -sV -Pn -vv -p " + str(port) + " --script=ftp-anon,ftp-bounce,ftp-libopie,ftp-proftpd-backdoor,ftp-vsftpd-backdoor,ftp-vuln-cve2010-4221 -oN '" + os.getcwd() + "/" + ip_address + "/ftp_" + ip_address + ".nmap' " + ip_address
    print bcolors.HEADER + FTPSCAN + bcolors.ENDC
    results_ftp = ""
    try:
        results_ftp = subprocess.check_output(FTPSCAN, shell=True)
    except Exception as e:
        results_ftp = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with ENUM4LINUX-Nmap-scan for " + ip_address + bcolors.ENDC
    print results_ftp
    write_to_file(ip_address, "ftpenumscan", results_ftp)
    return

def udpScan(ip_address):
    print bcolors.HEADER + "INFO: Detected UDP on " + ip_address + bcolors.ENDC
    UDPSCAN = "/usr/bin/nmap -vv -Pn -A -sC -sU -T 4 --top-ports 200 -oN '" + os.getcwd() + "/" + ip_address + "/udp_" + ip_address + ".nmap' " + ip_address
    print bcolors.HEADER + UDPSCAN + bcolors.ENDC
    udpscan_results = ""
    try:
        udpscan_results = subprocess.check_output(UDPSCAN, shell=True)
    except Exception as e:
        udpscan_results = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with UDP-Nmap scan for " + ip_address + bcolors.ENDC
    write_to_file(ip_address, "nmapudpscan", udpscan_results)
    print udpscan_results

def snmpScan(ip_address, port):
    print bcolors.HEADER + "INFO: Detected SNMP on " + ip_address + bcolors.ENDC
    SNMPSCAN = "/usr/bin/snmp-check " + ip_address + " -c public"
    print bcolors.HEADER + SNMPSCAN + bcolors.ENDC
    snmp_results = ""
    try:
        snmp_results = subprocess.check_output(SNMPSCAN, shell=True)
    except Exception as e:
        snmp_results = "Error: " + str(e)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with SNMP scan for " + ip_address + bcolors.ENDC
    write_to_file(ip_address, "snmpscan", snmp_results)
    print snmp_results

def sshScan(ip_address, port):
    print bcolors.HEADER + "INFO: Detected SSH on " + ip_address + ":" + port  + bcolors.ENDC
    connect_to_port(ip_address, port, "ssh")

def pop3Scan(ip_address, port):
    print bcolors.HEADER + "INFO: Detected POP3 on " + ip_address + ":" + port  + bcolors.ENDC
    connect_to_port(ip_address, port, "pop3")

def nmapScan(ip_address):
    ip_address = ip_address.strip()
    print bcolors.OKGREEN + "INFO: Running general TCP/UDP nmap scans for " + ip_address + bcolors.ENDC


    TCPSCAN = "/usr/bin/nmap -sV -O " + ip_address + " -oN '" + os.getcwd() + "/" + ip_address + "/" + ip_address + ".nmap'"
    print bcolors.HEADER + TCPSCAN + bcolors.ENDC
    results = subprocess.check_output(TCPSCAN, shell=True)
    print bcolors.OKGREEN + "INFO: RESULT BELOW - Finished with BASIC Nmap-scan for " + ip_address + bcolors.ENDC
    print results

    p = multiprocessing.Process(target=udpScan, args=(scanip,))
    p.start()

    write_to_file(ip_address, "portscan", results)
    lines = results.split("\n")
    serv_dict = {}
    for line in lines:
        ports = []
        line = line.strip()
        if ("tcp" in line) and ("open" in line) and not ("Discovered" in line):
            # print line
            while "  " in line:
                line = line.replace("  ", " ");
            linesplit= line.split(" ")
            service = linesplit[2] # grab the service name

            port = line.split(" ")[0] # grab the port/proto
            # print port
            if service in serv_dict:
                ports = serv_dict[service] # if the service is already in the dict, grab the port list

            ports.append(port)
            # print ports
            serv_dict[service] = ports # add service to the dictionary along with the associated port(2)



   # go through the service dictionary to call additional targeted enumeration functions
    for serv in serv_dict:
        ports = serv_dict[serv]
        if (serv == "http") or (serv == "http-proxy") or (serv == "http-alt") or (serv == "http?"):
            for port in ports:
                port = port.split("/")[0]
                multProc(httpEnum, ip_address, port)
        elif (serv == "ssl/http") or ("https" == serv) or ("https?" == serv):
            for port in ports:
                port = port.split("/")[0]
                multProc(httpsEnum, ip_address, port)
        elif "smtp" in serv:
            for port in ports:
                port = port.split("/")[0]
                multProc(smtpEnum, ip_address, port)
        elif "ftp" in serv:
            for port in ports:
                port = port.split("/")[0]
                multProc(ftpEnum, ip_address, port)
        elif ("microsoft-ds" in serv) or ("netbios-ssn" == serv):
            for port in ports:
                port = port.split("/")[0]
                multProc(smbEnum, ip_address, port)
                multProc(smbNmap, ip_address, port)
        elif "ms-sql" in serv:
            for port in ports:
                port = port.split("/")[0]
                multProc(mssqlEnum, ip_address, port)
        elif "ssh" in serv:
            for port in ports:
                port = port.split("/")[0]
                multProc(sshScan, ip_address, port)
        elif "snmp" in serv:
            for port in ports:
                port = port.split("/")[0]
                multProc(snmpScan, ip_address, port)
    return


print bcolors.HEADER
print "------------------------------------------------------------"
print "!!!!                      RECON SCAN                   !!!!!"
print "!!!!            A multi-process service scanner        !!!!!"
print "!!!!        dirb, nikto, ftp, ssh, mssql, pop3, tcp    !!!!!"
print "!!!!                    udp, smtp, smb                 !!!!!"
print "------------------------------------------------------------"



if len(sys.argv) < 2:
    print ""
    print "Usage: python reconscan.py <ip> <ip> <ip>"
    print "Example: python reconscan.py 192.168.1.101 192.168.1.102"
    print ""
    print "############################################################"
    pass
    sys.exit()

print bcolors.ENDC

if __name__=='__main__':

    # Setting ip targets
    targets = sys.argv
    targets.pop(0)

    dirs = os.listdir(os.getcwd())
    for scanip in targets:
        scanip = scanip.rstrip()
        if not scanip in dirs:
            print bcolors.HEADER + "INFO: No folder was found for " + scanip + ". Setting up folder." + bcolors.ENDC
            subprocess.check_output("mkdir " + os.getcwd() + "/" + scanip, shell=True)
            #subprocess.check_output("mkdir " + os.getcwd() + "/" + scanip + "/exploits", shell=True)
            #subprocess.check_output("mkdir " + os.getcwd() + "/" + scanip + "/privesc", shell=True)
            print bcolors.OKGREEN + "INFO: Folder created here: " + os.getcwd() + "/" + scanip + bcolors.ENDC
            subprocess.check_output("cp " + os.getcwd() + "/windows-template.md " + os.getcwd() + "/" + scanip + "/mapping-windows.html", shell=True)
            subprocess.check_output("cp " + os.getcwd() + "/linux-template.md " + os.getcwd() + "/" + scanip + "/mapping-linux.html", shell=True)
            print bcolors.OKGREEN + "INFO: Added pentesting templates: " + os.getcwd() + "/" + scanip + bcolors.ENDC
            subprocess.check_output("sed -i -e 's/INSERTIPADDRESS/" + scanip + "/g' " + os.getcwd() + "/" + scanip + "/mapping-windows.html", shell=True)
            subprocess.check_output("sed -i -e 's/INSERTIPADDRESS/" + scanip + "/g' " + os.getcwd() + "/" + scanip + "/mapping-linux.html", shell=True)



        p = multiprocessing.Process(target=nmapScan, args=(scanip,))
        p.start()
